import socket
import ssl
import time
import certifi
import requests
from urllib.parse import urlparse
from sslyze import (
    ServerNetworkLocation,
    Scanner,
    ServerScanRequest,
    ScanCommand,
    ServerScanResult,
)
import logging



class VulnerabilityScanner:
    def __init__(self, url):
        self.url = url if url.startswith("http") else f"http://{url}"
        self.parsed_url = urlparse(self.url)
        self.hostname = self.parsed_url.hostname
        self.open_ports = []
        self.ssl_issues = []
        self.vulnerabilities = []

    def scan(self):
        self.check_open_ports()
        self.check_ssl()
        self.check_sql_injection()
        self.check_xss()
        self.report()

    def report(self):
        print(f"Scanning Report for {self.url}")
        print("Open Ports:", self.open_ports)
        print("SSL Issues:", self.ssl_issues)
        print("Vulnerabilities:", self.vulnerabilities)

    def check_open_ports(self, ports=None):
        if ports is None:
            ports = [21, 22, 23, 25, 80, 110, 443, 8080, 135, 139, 143, 445, 993, 995, 3306, 3389, 5900, 8081, 8443]
        ip = socket.gethostbyname(self.hostname)

        for port in ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((ip, port))
            if result == 0:
                self.open_ports.append(port)
            sock.close()

    def check_ssl(self):
         try:
             server_location = ServerNetworkLocation(hostname=self.hostname, port=443)
             scanner = Scanner()
             scan_request = ServerScanRequest(
                  server_location=server_location,
                  scan_commands={ScanCommand.SSL_2_0_CIPHER_SUITES, ScanCommand.SSL_3_0_CIPHER_SUITES,
                           ScanCommand.TLS_1_0_CIPHER_SUITES, ScanCommand.TLS_1_1_CIPHER_SUITES,
                           ScanCommand.TLS_1_2_CIPHER_SUITES, ScanCommand.TLS_1_3_CIPHER_SUITES,
                           ScanCommand.CERTIFICATE_INFO}
            )
             scanner.queue_scan(scan_request)
             result = scanner.get_results()

             if result.certificate_info:
              cert_info = result.certificate_info
              not_after = cert_info.earliest_not_after().replace(tzinfo=None)
             if not_after < time.time():
              self.ssl_issues.append("SSL certificate has expired.")
             if not ssl.match_hostname(cert_info.certificate_chain[0].subject, self.hostname):
              self.ssl_issues.append("Hostname does not match SSL certificate.")

             for protocol in result.ssl_2_0_cipher_suites:
              if protocol.accepted_cipher_suites:
               self.ssl_issues.append("SSL 2.0 is supported, which is insecure.")
             for protocol in result.ssl_3_0_cipher_suites:
              if protocol.accepted_cipher_suites:
               self.ssl_issues.append("SSL 3.0 is supported, which is insecure.")
         except Exception as e:
           self.ssl_issues.append(f"SSL error: {e}")

           

    def check_sql_injection(self):
        sql_payloads = [
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "' OR 'a'='a"
        ]
        for payload in sql_payloads:
            test_url = f"{self.url}?id={payload}"
            try:
                response = requests.get(test_url)
                if "error" in response.text.lower() or "sql" in response.text.lower():
                    self.vulnerabilities.append(f"Potential SQL Injection with payload:{payload}")
            except Exception as e:
                self.vulnerabilities.append(f"SQL Injection check error with payload{payload}: {e}")

    def check_xss(self):
        xss_payloads = [
             "<script>alert('xss')</script>",
             "<img src='x' onerror='alert(1)'>",
             "<svg unload='alert(1)'>"
        ]
        for payload in xss_payloads:
            try:
                response = requests.get(self.url, params={"q": xss_payloads})
                if payload in response.text:
                    self.vulnerabilities.append(f"Potential XSS Vulnerability with payload:{payload}")
            except Exception as e:
                self.vulnerabilities.append(f"XSS check error with payload {payload}: {e}")




if __name__ == "__main__":
    url = input("Enter the URL to scan: ")
    scanner = VulnerabilityScanner(url)
    scanner.scan()
